const calendar = require('./calendar');
const accountBalanceNotification = require('./accountBalanceNotification');
const phoneInformation = require('./phoneInforamtion');
const showLog = require('./logger');

const getStartCommandKeyboard = () => {
  let startCommandKeyboard = {
    reply_markup: {
      keyboard: [['–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'], ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É']],
      one_time_keyboard: true,
      resize_keyboard: true,
    }
  };
  startCommandKeyboard.reply_markup.keyboard.push(
    [accountBalanceNotificationButton ? '–í—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞' : '–í–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞']
  );

  return startCommandKeyboard;
};

const periodKeyboard = {
  reply_markup: {
    keyboard: [
      ['–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'],
      // ['–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é', '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏'],
      ['–ù–∞–∑–∞–¥']
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

const setPeriodKeyboard = {
  reply_markup: {
    keyboard: [
      ['—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –¥–æ'],
      ['–ù–∞–∑–∞–¥']
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

let accountBalanceNotificationButton = false;

const setAccountDateFrom = (ctx) => {
  calendar.setBillDateFrom(true);
  calendar.getCalendar(ctx);
  ctx.telegram.sendMessage(ctx.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", setPeriodKeyboard);
};

const setAccountDateTo = (ctx) => {
  calendar.setBillDateTo(true);
  calendar.getCalendar(ctx);
};

const backButton = [getStartCommandKeyboard(), periodKeyboard, periodKeyboard];
let stepBackButton = 0;

let phoneInformationFlag = false;

const buttonListener = (bot) => {
  bot.start((ctx) => {
    showLog(ctx.message);
    ctx.telegram.sendMessage(ctx.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", getStartCommandKeyboard());
  });

  bot.command("set_account_date_from", (ctx) => {
    showLog(ctx.message);
    setAccountDateFrom(ctx);
  });

  bot.command("set_account_date_to", (ctx) => {
    showLog(ctx.message);
    setAccountDateTo(ctx);
  });

  bot.command("show_number_information", (ctx) => {
    showLog(ctx.message);
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
    stepBackButton = 1;
    phoneInformationFlag = true;
  });

  bot.on('text', (ctx) => {
    showLog(ctx.message);

    if (phoneInformationFlag) {
      phoneInformationFlag = false;
      showLog("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.");
      // todo –∫–æ–≥–¥–∞ –¢–∞—Ä–∞—Å –±—É–¥–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ-–∏—é
      ctx.reply("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...");
      phoneInformation.getMyNumbers(ctx.message.text, (users) => {
        let infoRow = "<pre>   –ù–æ–º–µ—Ä      $    –ò–º—è</pre>\n";
        users.forEach((user) => {
          infoRow += `${user.number}  ${user.balance}  ${user.name} \n`
        });
        ctx.replyWithHTML(infoRow);
        showLog("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –≤—ã–ø–æ–ª–Ω–µ–Ω.");
      });
    } else {
      switch (ctx.message.text) {
        case '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
          stepBackButton = 0;
          ctx.telegram.sendMessage(ctx.chat.id, "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã?", periodKeyboard);
          break;
        case '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥':
          stepBackButton = 1;
          ctx.telegram.sendMessage(ctx.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", setPeriodKeyboard);
          break;
        case '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ—Ç':
          stepBackButton = 1;
          setAccountDateFrom(ctx);
          break;
        case '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –¥–æ':
          stepBackButton = 1;
          setAccountDateTo(ctx);
          break;
        case '–í–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞':
          accountBalanceNotification.turnOn((balance) => {
            ctx.replyWithHTML(
              `<b>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞—Å–µ TravelSim: ${balance}.</b> \n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–π –ø–∞–Ω–∏–∫–∏.`
            );
          });
          accountBalanceNotificationButton = true;
          ctx.telegram.sendMessage(ctx.chat.id, "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞ 50$", getStartCommandKeyboard());
          break;
        case '–í—ã–∫–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞':
          accountBalanceNotification.turnOff();
          accountBalanceNotificationButton = false;
          ctx.telegram.sendMessage(ctx.chat.id, "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", getStartCommandKeyboard());
          break;
        case '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É':
          ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
          stepBackButton = 1;
          phoneInformationFlag = true;
          break;
        case '–ù–∞–∑–∞–¥':
          ctx.telegram.sendMessage(ctx.chat.id, "üîô", backButton[stepBackButton]);
          stepBackButton = stepBackButton - 1;
          break;
      }
    }
  });
};

module.exports = buttonListener;